#同步协程  time.sleep()


#异步协程的操作：

import asyncio #异步爬虫需要asyncio模块
import time

# async def func():
#     print("hello")
#
# if __name__ == '__main__':
#     g = func() #此时的函数是异步协程函数，此时函数执行得到的是一个协程对象
#     asyncio.run(g)#协程函数运行需要asyncio模块的支持


#异步中断
async def func1():
    print("你好啊，人")
    await asyncio.sleep(3)
    print("你好啊，人")

async def func2():
    print("你好吗？人")
    await asyncio.sleep(2)
    print("你好吗？人")

async def func3():
    print("你好，人们")
    await asyncio.sleep(4)
    print("你好，人们")


async def main():
            #第一种写法
            #f1 = func1()
            #await f1      #一般await挂起操作放在协程对象前面
            #第二种写法(推荐)
            tasks = {
                asyncio.create_task(func1()),   #pycharm3.8以后需要加上asyncio.create_task()
                asyncio.create_task(func2()),
                asyncio.create_task(func3())
            }
            await asyncio.wait(tasks)

if __name__ == '__main__':
    t1 = time.time()#获得时间戳
    #一次性启动多个任务（协程）
    asyncio.run(main())
    t2 = time.time()
    print(t2-t1)


# #在爬虫领域中的应用
# async def download(url):
#     print("准备开始下载")
#     await asyncio.sleep(2)  #网络请求
#     print("下载完成")
#
# async def main():
#     urls = [
#         "http://www.baidu.com",
#         "http://www.bilibili.com"
#
#     ]
#     #准备异步协程对象列表
#     tasks = []
#     for url in urls:
#         d = asyncio.create_task(download(url))
#         tasks.append(d)
#     #一次性执行完毕
#     await asyncio.wait(tasks)
# if __name__ == '__main__':
#     asyncio.run(main())
